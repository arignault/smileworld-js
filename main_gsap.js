// Import des modules
import { initMenuMobile } from './menu-mobile.js';
import { initCentreCards } from './centre-card.js';
import { initMenuDesktop } from './menu-desktop.js';

console.log('üîç Script main_gsap.js charg√©');

// Variable globale pour suivre l'√©tat d'initialisation
let isInitializing = false;
let initializationTimeout = null;

// Fonction pour d√©finir les √©tats initiaux
function setInitialStates() {
    console.log('üîÑ D√©finition des √©tats initiaux...');
    
    // Fermer tous les menus desktop
    const menuWrapper = document.querySelector('.desktop_menu_wrapper');
    if (menuWrapper) {
        menuWrapper.style.display = 'none';
        menuWrapper.style.opacity = '0';
    }

    // Fermer tous les menus individuels
    const menuContainers = document.querySelectorAll('.parc_menu_desktop, .activites_menu_desktop, .offres_menu_desktop');
    menuContainers.forEach(container => {
        if (container) {
            container.style.display = 'none';
            container.style.opacity = '0';
        }
    });

    // Fermer le menu mobile
    const menuMobile = document.querySelector('.menu-mobile');
    if (menuMobile) {
        menuMobile.style.display = 'none';
        menuMobile.style.opacity = '0';
    }

    // Fermer toutes les cartes
    const cards = document.querySelectorAll('.centre-card_wrapper.effect-cartoon-shadow');
    cards.forEach(card => {
        if (card) {
            card.classList.remove('is-open');
            const tagHolderWrapper = card.querySelector('.tag-holder-wrapper');
            if (tagHolderWrapper) {
                tagHolderWrapper.classList.remove('is-open');
            }
        }
    });

    console.log('‚úÖ √âtats initiaux d√©finis');
}

// Fonction pour afficher un compte √† rebours
function logCountdown(seconds) {
    console.log('\n==========================================');
    console.log(`‚è∞ D√âLAI DE ${seconds} SECONDES EN COURS...`);
    console.log('==========================================\n');
    
    let remaining = seconds;
    
    const interval = setInterval(() => {
        remaining--;
        console.log('\n==========================================');
        console.log(`‚è∞ ${remaining} seconde${remaining > 1 ? 's' : ''} restante${remaining > 1 ? 's' : ''}...`);
        console.log('==========================================\n');
        
        if (remaining <= 0) {
            clearInterval(interval);
            console.log('\n==========================================');
            console.log('‚è∞ D√âLAI TERMIN√â !');
            console.log('==========================================\n');
        }
    }, 1000);

    return interval;
}

// Fonction pour v√©rifier si la CMS List est charg√©e
function isCMSListLoaded() {
    const cmsList = document.querySelector('.centre-card_wrapper.effect-cartoon-shadow');
    const isLoaded = cmsList && cmsList.children.length > 0;
    console.log('üîç V√©rification CMS List:', {
        element: cmsList ? '‚úÖ trouv√©' : '‚ùå non trouv√©',
        enfants: cmsList ? `${cmsList.children.length} √©l√©ments` : '0 √©l√©ment',
        charg√©: isLoaded ? '‚úÖ' : '‚ùå'
    });
    return isLoaded;
}

// Fonction pour initialiser avec d√©lai
function initializeWithDelay() {
    console.log('üîç Fonction initializeWithDelay appel√©e');
    
    if (isInitializing) {
        console.log('‚ö†Ô∏è Initialisation d√©j√† en cours...');
        return;
    }

    if (initializationTimeout) {
        console.log('‚ö†Ô∏è Timeout d√©j√† en cours, annulation...');
        clearTimeout(initializationTimeout);
    }

    isInitializing = true;
    console.log('\n==========================================');
    console.log('‚è≥ PR√âPARATION DE L\'INITIALISATION');
    console.log('‚ö†Ô∏è ATTENTION: UN D√âLAI DE 5 SECONDES VA COMMENCER');
    console.log('==========================================\n');

    // D√©finir les √©tats initiaux avant le d√©lai
    setInitialStates();

    // D√©marrer le compte √† rebours
    const countdownInterval = logCountdown(5);

    // Cr√©er le timeout
    initializationTimeout = setTimeout(() => {
        console.log('üîç Timeout d√©clench√©');
        clearInterval(countdownInterval);
        clearTimeout(initializationTimeout);
        initializationTimeout = null;

        console.log('\n==========================================');
        console.log('üîÑ D√âBUT DE L\'INITIALISATION APR√àS D√âLAI');
        console.log('==========================================\n');

        try {
            // V√©rifier l'√©tat du DOM avant l'initialisation
            checkDOMState();
            
            // Initialiser les menus dans l'ordre
            console.log('\nüîÑ Initialisation du menu mobile...');
            initMenuMobile();
            console.log("‚úÖ Menu mobile initialis√©");
            
            console.log('\nüîÑ Initialisation du menu desktop...');
            initMenuDesktop();
            console.log("‚úÖ Menu desktop initialis√©");
            
            // Attendre un court instant avant d'initialiser les cartes
            setTimeout(() => {
                console.log('\nüîÑ Initialisation des cartes...');
                initCentreCards();
                console.log("‚úÖ Cartes initialis√©es");
                
                // V√©rification finale
                console.log('\nüìä √âTAT FINAL APR√àS INITIALISATION:');
                checkDOMState();
            }, 100);
            
        } catch (error) {
            console.error("\n‚ùå Erreur lors de l'initialisation:", error);
            console.error("Stack trace:", error.stack);
        } finally {
            isInitializing = false;
        }
    }, 5000);
}

// Fonction pour v√©rifier l'√©tat du DOM
function checkDOMState() {
    console.log('\nüìä √âtat du DOM:');
    console.log('- Menu mobile:', document.querySelector('.menu-mobile') ? '‚úÖ' : '‚ùå');
    console.log('- Menu desktop:', document.querySelector('.desktop_menu_wrapper') ? '‚úÖ' : '‚ùå');
    console.log('- CMS List:', document.querySelector('.centre-card_wrapper.effect-cartoon-shadow') ? '‚úÖ' : '‚ùå');
    console.log('- Nombre total de cartes:', document.querySelectorAll('.centre-card_wrapper.effect-cartoon-shadow').length);
}

// Fonction d'initialisation principale
function initializeAll() {
    console.log('\n==========================================');
    console.log("üöÄ D√âBUT DE L'INITIALISATION DES MODULES GSAP");
    console.log("‚è∞ Fonction initializeAll appel√©e");
    console.log("==========================================\n");
    
    // V√©rifier l'√©tat initial du DOM
    checkDOMState();
    
    // D√©marrer l'initialisation avec d√©lai
    initializeWithDelay();
}

// Attendre que le DOM soit compl√®tement charg√©
if (document.readyState === 'loading') {
    console.log('üîç DOM en cours de chargement, attente de DOMContentLoaded...');
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üîç DOMContentLoaded d√©clench√©');
        initializeAll();
    });
} else {
    console.log('üîç DOM d√©j√† charg√©, initialisation imm√©diate...');
    initializeAll();
}

// Backup avec window.onload
window.onload = function() {
    console.log('üîç window.onload d√©clench√©');
    if (!isInitializing) {
        console.log('‚ö†Ô∏è R√©initialisation via window.onload');
        initializeAll();
    }
};
