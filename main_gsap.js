// Version: 1.0.8 - Am√©lioration de l'initialisation
console.log('üöÄ main_gsap.js v1.0.8 charg√©');

// Log de d√©bogage pour les imports
console.log('üîç Tentative d\'import des modules...');

// Import des modules dans l'ordre de priorit√©
import { initLoadingScreen, hideLoadingScreen, forceHideLoadingScreen } from './loading-screen.js';  // Priorit√© 0
import { initMenuMobile } from './menu-mobile.js';        // Priorit√© 1
import { initMenuDesktop } from './menu-desktop.js';      // Priorit√© 2
import { initCentreCards } from './centre-card.js';       // Priorit√© 3
import { initMenuDesktopHoverActivite } from './menu-desktop-hover-activite.js';  // Priorit√© 4
import { initTextAnimation } from './text-animation.js';  // Priorit√© 5

// Logs de confirmation des imports
console.log('üì¶ Import de menu-mobile.js (Priorit√© 1)...');
console.log('üì¶ Import de menu-desktop.js (Priorit√© 2)...');
console.log('üì¶ Import de centre-card.js (Priorit√© 3)...');
console.log('üì¶ Import de menu-desktop-hover-activite.js (Priorit√© 4)...');
console.log('üì¶ Import de text-animation.js (Priorit√© 5)...');

// V√©rification des fonctions import√©es
console.log('üîç V√©rification des fonctions import√©es:');
console.log('- initMenuMobile:', typeof initMenuMobile === 'function' ? '‚úÖ' : '‚ùå');
console.log('- initCentreCards:', typeof initCentreCards === 'function' ? '‚úÖ' : '‚ùå');
console.log('- initMenuDesktop:', typeof initMenuDesktop === 'function' ? '‚úÖ' : '‚ùå');
console.log('- initTextAnimation:', typeof initTextAnimation === 'function' ? '‚úÖ' : '‚ùå');
console.log('- initMenuDesktopHoverActivite:', typeof initMenuDesktopHoverActivite === 'function' ? '‚úÖ' : '‚ùå');

console.log('üîç Script main_gsap.js charg√©');

// Variable globale pour suivre l'√©tat d'initialisation
let isInitializing = false;
let initializationAttempted = false;
let modulesLoaded = {
    menuMobile: false,
    menuDesktop: false,
    centreCards: false,
    textAnimation: false,
    menuDesktopHoverActivite: false
};

// Fonction pour d√©finir les √©tats initiaux
function setInitialStates() {
    console.log('üîÑ D√©finition des √©tats initiaux...');
    
    // Fermer tous les menus desktop
    const menuWrapper = document.querySelector('.desktop_menu_wrapper');
    if (menuWrapper) {
        menuWrapper.style.display = 'none';
        menuWrapper.style.opacity = '0';
    }

    // Fermer tous les menus individuels
    const menuContainers = document.querySelectorAll('.parc_menu_desktop, .activites_menu_desktop, .offres_menu_desktop');
    menuContainers.forEach(container => {
        if (container) {
            container.style.display = 'none';
            container.style.opacity = '0';
        }
    });

    // Fermer le menu mobile
    const menuMobile = document.querySelector('.menu-mobile');
    if (menuMobile) {
        menuMobile.style.display = 'none';
        menuMobile.style.opacity = '0';
    }

    console.log('‚úÖ √âtats initiaux d√©finis');
}

// Fonction pour v√©rifier si tous les modules sont charg√©s
function checkModulesLoaded() {
    return Object.values(modulesLoaded).every(loaded => loaded);
}

// Fonction pour v√©rifier l'√©tat du DOM
function checkDOMState() {
    console.log('\nüìä √âtat du DOM:');
    console.log('- Menu mobile:', document.querySelector('.menu-mobile') ? '‚úÖ' : '‚ùå');
    console.log('- Menu desktop:', document.querySelector('.desktop_menu_wrapper') ? '‚úÖ' : '‚ùå');
    console.log('- Module centre-card:', '‚úÖ (version minimaliste)');
}

// Fonction pour v√©rifier si le DOM est pr√™t
function isDOMReady() {
    return document.readyState === 'complete' || document.readyState === 'interactive';
}

// Fonction pour initialiser avec d√©lai
async function initializeWithDelay() {
    console.log('üîç Fonction initializeWithDelay appel√©e');
    
    if (isInitializing) {
        console.log('‚ö†Ô∏è Initialisation d√©j√† en cours...');
        return;
    }

    if (initializationAttempted) {
        console.log('‚ö†Ô∏è Initialisation d√©j√† tent√©e pr√©c√©demment');
        return;
    }

    initializationAttempted = true;
    isInitializing = true;

    console.log('\n==========================================');
    console.log('‚è≥ PR√âPARATION DE L\'INITIALISATION');
    console.log('==========================================\n');

    // V√©rifier si le DOM est pr√™t
    if (!isDOMReady()) {
        console.log('‚è≥ En attente que le DOM soit pr√™t...');
        await new Promise(resolve => {
            const checkDOM = setInterval(() => {
                if (isDOMReady()) {
                    clearInterval(checkDOM);
                    resolve();
                }
            }, 100);
        });
    }

    try {
        // Initialiser le loading screen en premier
        console.log('üîÑ Initialisation du loading screen...');
        const loadingScreen = await initLoadingScreen();
        if (!loadingScreen) {
            throw new Error('Loading screen non initialis√© correctement');
        }

        // D√©finir les √©tats initiaux
        setInitialStates();

        // Attendre que tous les modules soient charg√©s
        let loadAttempts = 0;
        const maxLoadAttempts = 50; // 5 secondes maximum

        while (!checkModulesLoaded() && loadAttempts < maxLoadAttempts) {
            console.log('‚è≥ En attente du chargement des modules...', modulesLoaded);
            await new Promise(resolve => setTimeout(resolve, 100));
            loadAttempts++;
        }

        if (loadAttempts >= maxLoadAttempts) {
            console.warn('‚ö†Ô∏è Timeout lors du chargement des modules');
            forceHideLoadingScreen();
            return;
        }

        console.log('\n==========================================');
        console.log('üîÑ D√âBUT DE L\'INITIALISATION IMM√âDIATE');
        console.log('==========================================\n');

        // V√©rifier l'√©tat du DOM avant l'initialisation
        checkDOMState();
        
        // Initialisation des modules dans l'ordre
        try {
            // 1. Initialisation du menu mobile (Priorit√© 1)
            console.log('\nüîÑ Initialisation du menu mobile (Priorit√© 1)...');
            await initMenuMobile();
            modulesLoaded.menuMobile = true;
            console.log("‚úÖ Menu mobile initialis√©");

            // 2. Initialisation du menu desktop (Priorit√© 2)
            console.log('\nüîÑ Initialisation du menu desktop (Priorit√© 2)...');
            await initMenuDesktop();
            modulesLoaded.menuDesktop = true;
            console.log("‚úÖ Menu desktop initialis√©");

            // 3. Initialisation des cartes (Priorit√© 3)
            console.log('\nüîÑ Initialisation du module centre-card (Priorit√© 3)...');
            await initCentreCards();
            modulesLoaded.centreCards = true;
            console.log("‚úÖ Module centre-card initialis√©");

            // 4. Initialisation du menu hover activite (Priorit√© 4)
            console.log('\nüîÑ Initialisation du menu hover activite (Priorit√© 4)...');
            await initMenuDesktopHoverActivite();
            modulesLoaded.menuDesktopHoverActivite = true;
            console.log("‚úÖ Menu hover activite initialis√©");

            // 5. Initialisation de l'animation de texte (Priorit√© 5)
            console.log('\nüîÑ Initialisation de l\'animation de texte (Priorit√© 5)...');
            await initTextAnimation();
            modulesLoaded.textAnimation = true;
            console.log("‚úÖ Animation de texte initialis√©e");

            // Apr√®s l'initialisation de tous les modules
            console.log('\nüìä √âTAT FINAL APR√àS INITIALISATION:');
            checkDOMState();
            
            // Masquer le loading screen une fois que tout est initialis√©
            console.log('\nüîÑ Masquage du loading screen...');
            await new Promise(resolve => setTimeout(resolve, 500)); // Petit d√©lai pour s'assurer que tout est bien initialis√©
            hideLoadingScreen();
            
        } catch (error) {
            console.error("\n‚ùå Erreur lors de l'initialisation des modules:", error);
            console.error("Stack trace:", error.stack);
            forceHideLoadingScreen();
            throw error;
        }
         
    } catch (error) {
        console.error("\n‚ùå Erreur fatale lors de l'initialisation:", error);
        console.error("Stack trace:", error.stack);
        forceHideLoadingScreen();
    } finally {
        isInitializing = false;
    }
}

// Fonction pour d√©marrer l'initialisation
function startInitialization() {
    console.log("\n==========================================");
    console.log("üöÄ D√âBUT DE L'INITIALISATION DES MODULES GSAP");
    console.log("‚è∞ √âtat du DOM:", document.readyState);
    console.log("==========================================\n");
    
    // V√©rifier l'√©tat initial du DOM
    checkDOMState();
    
    // Marquer les modules comme charg√©s
    modulesLoaded = {
        menuMobile: true,
        menuDesktop: true,
        centreCards: true,
        textAnimation: true,
        menuDesktopHoverActivite: true
    };
    
    // D√©marrer l'initialisation
    initializeWithDelay().catch(error => {
        console.error("\n‚ùå Erreur fatale lors de l'initialisation:", error);
        console.error("Stack trace:", error.stack);
        isInitializing = false;
        forceHideLoadingScreen();
    });
}

// D√©marrer l'initialisation d√®s que possible
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', startInitialization);
} else {
    startInitialization();
}

// Backup : si l'initialisation n'a pas d√©marr√© apr√®s 2 secondes, la forcer
setTimeout(() => {
    if (!isInitializing && !initializationAttempted) {
        console.log('‚ö†Ô∏è Initialisation non d√©marr√©e apr√®s 2 secondes, d√©marrage forc√©');
        startInitialization();
    }
}, 2000);
