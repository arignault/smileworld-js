// Version: 1.0.3 - Ajout de l'animation de texte
console.log('üöÄ main_gsap.js v1.0.3 charg√©');

// Log de d√©bogage pour les imports
console.log('üîç Tentative d\'import des modules...');

// Import des modules
import { initMenuMobile } from './menu-mobile.js';
import { initCentreCards } from './centre-card.js'; // R√©import√© pour la reconstruction
import { initMenuDesktop } from './menu-desktop.js';
import { initTextAnimation } from './text-animation.js';

// Logs de confirmation des imports
console.log('üì¶ Import de menu-mobile.js...');
console.log('üì¶ Import de centre-card.js (version minimaliste)...');
console.log('üì¶ Import de menu-desktop.js...');
console.log('üì¶ Import de text-animation.js...');

// V√©rification des fonctions import√©es
console.log('üîç V√©rification des fonctions import√©es:');
console.log('- initMenuMobile:', typeof initMenuMobile === 'function' ? '‚úÖ' : '‚ùå');
console.log('- initCentreCards:', typeof initCentreCards === 'function' ? '‚úÖ' : '‚ùå');
console.log('- initMenuDesktop:', typeof initMenuDesktop === 'function' ? '‚úÖ' : '‚ùå');
console.log('- initTextAnimation:', typeof initTextAnimation === 'function' ? '‚úÖ' : '‚ùå');

console.log('üîç Script main_gsap.js charg√©');

// Variable globale pour suivre l'√©tat d'initialisation
let isInitializing = false;
let initializationTimeout = null;
let modulesLoaded = {
    menuMobile: false,
    menuDesktop: false,
    centreCards: false,
    textAnimation: false // Ajout du module d'animation de texte
};

// Fonction pour d√©finir les √©tats initiaux
function setInitialStates() {
    console.log('üîÑ D√©finition des √©tats initiaux...');
    
    // Fermer tous les menus desktop
    const menuWrapper = document.querySelector('.desktop_menu_wrapper');
    if (menuWrapper) {
        menuWrapper.style.display = 'none';
        menuWrapper.style.opacity = '0';
    }

    // Fermer tous les menus individuels
    const menuContainers = document.querySelectorAll('.parc_menu_desktop, .activites_menu_desktop, .offres_menu_desktop');
    menuContainers.forEach(container => {
        if (container) {
            container.style.display = 'none';
            container.style.opacity = '0';
        }
    });

    // Fermer le menu mobile
    const menuMobile = document.querySelector('.menu-mobile');
    if (menuMobile) {
        menuMobile.style.display = 'none';
        menuMobile.style.opacity = '0';
    }

    console.log('‚úÖ √âtats initiaux d√©finis');
}

// Fonction pour v√©rifier si tous les modules sont charg√©s
function checkModulesLoaded() {
    return Object.values(modulesLoaded).every(loaded => loaded);
}

// Fonction pour v√©rifier l'√©tat du DOM
function checkDOMState() {
    console.log('\nüìä √âtat du DOM:');
    console.log('- Menu mobile:', document.querySelector('.menu-mobile') ? '‚úÖ' : '‚ùå');
    console.log('- Menu desktop:', document.querySelector('.desktop_menu_wrapper') ? '‚úÖ' : '‚ùå');
    console.log('- Module centre-card:', '‚úÖ (version minimaliste)');
}

// Fonction pour initialiser avec d√©lai
async function initializeWithDelay() {
    console.log('üîç Fonction initializeWithDelay appel√©e');
    
    if (isInitializing) {
        console.log('‚ö†Ô∏è Initialisation d√©j√† en cours...');
        return;
    }

    isInitializing = true;
    console.log('\n==========================================');
    console.log('‚è≥ PR√âPARATION DE L\'INITIALISATION');
    console.log('==========================================\n');

    // D√©finir les √©tats initiaux
    setInitialStates();

    try {
        // Attendre que tous les modules soient charg√©s
        while (!checkModulesLoaded()) {
            console.log('‚è≥ En attente du chargement des modules...', modulesLoaded);
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        console.log('\n==========================================');
        console.log('üîÑ D√âBUT DE L\'INITIALISATION IMM√âDIATE');
        console.log('==========================================\n');

        // V√©rifier l'√©tat du DOM avant l'initialisation
        checkDOMState();
        
        // Initialiser les menus dans l'ordre
        console.log('\nüîÑ Initialisation du menu mobile...');
        try {
            await initMenuMobile();
            modulesLoaded.menuMobile = true;
            console.log("‚úÖ Menu mobile initialis√©");
        } catch (error) {
            console.error("‚ùå Erreur lors de l'initialisation du menu mobile:", error);
        }
        
        console.log('\nüîÑ Initialisation du menu desktop...');
        try {
            await initMenuDesktop();
            modulesLoaded.menuDesktop = true;
            console.log("‚úÖ Menu desktop initialis√©");
        } catch (error) {
            console.error("‚ùå Erreur lors de l'initialisation du menu desktop:", error);
        }
        
        // Initialisation minimale des cartes
        console.log('\nüîÑ Initialisation du module centre-card...');
        try {
            await initCentreCards();
            modulesLoaded.centreCards = true;
            console.log("‚úÖ Module centre-card initialis√© (version minimaliste)");

            // Initialisation de l'animation de texte APR√àS centre-card
            console.log('\nüîÑ Initialisation de l\'animation de texte...');
            try {
                await initTextAnimation();
                modulesLoaded.textAnimation = true;
                console.log("‚úÖ Animation de texte initialis√©e");
            } catch (error) {
                console.error("‚ùå Erreur lors de l'initialisation de l'animation de texte:", error);
            }
        } catch (error) {
            console.error("‚ùå Erreur lors de l'initialisation du module centre-card:", error);
        }
        
        // V√©rification finale
        console.log('\nüìä √âTAT FINAL APR√àS INITIALISATION:');
        checkDOMState();
         
    } catch (error) {
        console.error("\n‚ùå Erreur lors de l'initialisation:", error);
        console.error("Stack trace:", error.stack);
    } finally {
        isInitializing = false;
    }
}

// Initialisation globale
window.addEventListener('load', function() {
    console.log("\n==========================================");
    console.log("üöÄ D√âBUT DE L'INITIALISATION DES MODULES GSAP");
    console.log("‚è∞ window.load d√©clench√©");
    console.log("==========================================\n");
    
    // V√©rifier l'√©tat initial du DOM
    checkDOMState();
    
    // Marquer les modules comme charg√©s
    modulesLoaded = {
        menuMobile: true,
        menuDesktop: true,
        centreCards: true,
        textAnimation: true // Ajout du module d'animation de texte
    };
    
    // D√©marrer l'initialisation
    initializeWithDelay().catch(error => {
        console.error("\n‚ùå Erreur fatale lors de l'initialisation:", error);
        console.error("Stack trace:", error.stack);
        isInitializing = false;
    });
});
