// Version: 2.0.0 - Version minimaliste pour reconstruction
console.log('üöÄ centre-card.js v2.0.0 charg√© - Pr√™t pour reconstruction');

// Configuration des s√©lecteurs
const SELECTORS = {
    CARD: '.centre-card._wrapper',
    CLICKABLE: '#data-card-toggle, .clickable_wrap, .clickable_button, [data-attribute="data-card-toggle"]',
    TOGGLE_ELEMENTS: [
        '.centre-card_scroll_wrapper',
        '.centre-card_list',
        '.centre-card_button-holder'
    ],
    ALWAYS_VISIBLE: '.tag-holder-wrapper'
};

// √âtat initial des √©l√©ments √† cacher
function initializeCardElements() {
    console.log('üìù Initialisation des √©l√©ments des cartes...');
    let elementsInitialized = 0;
    
    // Initialiser les √©l√©ments √† cacher
    SELECTORS.TOGGLE_ELEMENTS.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        console.log(`üîç Recherche des √©l√©ments "${selector}": ${elements.length} trouv√©s`);
        
        elements.forEach(element => {
            gsap.set(element, { 
                display: 'none',
                opacity: 0
            });
            elementsInitialized++;
        });
    });

    // S'assurer que tag-holder-wrapper est visible
    const tagHolders = document.querySelectorAll(SELECTORS.ALWAYS_VISIBLE);
    tagHolders.forEach(element => {
        gsap.set(element, { 
            display: 'block',
            opacity: 1
        });
    });
    
    console.log(`‚úÖ Initialisation termin√©e: ${elementsInitialized} √©l√©ments configur√©s`);
}

// Gestion du toggle d'une carte
function toggleCard(cardElement) {
    const isOpen = cardElement.classList.contains('is-open');
    console.log(`üîÑ Toggle de la carte: ${isOpen ? 'fermeture' : 'ouverture'}`);
    console.log('üé¥ √âl√©ment carte:', cardElement);
    
    // Animation des √©l√©ments
    SELECTORS.TOGGLE_ELEMENTS.forEach(selector => {
        const element = cardElement.querySelector(selector);
        if (element) {
            console.log(`üé≠ Animation de "${selector}" vers ${isOpen ? 'none' : 'flex'}`);
            gsap.to(element, {
                display: isOpen ? 'none' : 'flex',
                opacity: isOpen ? 0 : 1,
                duration: 0.3,
                ease: 'power2.inOut',
                onStart: () => console.log(`‚ñ∂Ô∏è D√©but animation pour ${selector}`),
                onComplete: () => console.log(`‚úÖ Animation termin√©e pour ${selector}`)
            });
        } else {
            console.warn(`‚ö†Ô∏è √âl√©ment "${selector}" non trouv√© dans la carte`);
        }
    });

    // Mise √† jour de l'√©tat
    cardElement.classList.toggle('is-open');
    console.log(`üìå √âtat de la carte mis √† jour: ${!isOpen ? 'ouverte' : 'ferm√©e'}`);
}

// Gestionnaire d'√©v√©nements pour les cartes
function setupCardListeners() {
    console.log('üéØ Configuration des √©couteurs d\'√©v√©nements...');
    
    // Utiliser une d√©l√©gation d'√©v√©nements au niveau du conteneur
    const cardsContainer = document.querySelector('.collection-list-centre-wrapper');
    if (!cardsContainer) {
        console.warn('‚ö†Ô∏è Conteneur de cartes non trouv√©');
        return;
    }

    console.log('üîç Recherche des √©l√©ments cliquables...');
    const clickableElements = cardsContainer.querySelectorAll(SELECTORS.CLICKABLE);
    console.log(`üìä Nombre d'√©l√©ments cliquables trouv√©s: ${clickableElements.length}`);
    clickableElements.forEach((el, index) => {
        console.log(`üìå √âl√©ment ${index + 1}:`, el);
    });

    cardsContainer.addEventListener('click', (event) => {
        console.log('üëÜ Clic d√©tect√© dans le conteneur');
        console.log('üéØ √âl√©ment cliqu√©:', event.target);
        
        // V√©rifier si le clic provient d'un √©l√©ment cliquable
        const clickable = event.target.closest(SELECTORS.CLICKABLE);
        if (!clickable) {
            console.log('‚ùå Le clic n\'est pas sur un √©l√©ment cliquable');
            return;
        }

        console.log('‚úÖ √âl√©ment cliquable trouv√©:', clickable);
        event.preventDefault();
        event.stopPropagation();
        
        // Trouver la carte parente
        const card = clickable.closest(SELECTORS.CARD);
        if (card) {
            console.log('üé¥ Carte parente trouv√©e:', card);
            console.log('üîç Chemin DOM:', card.parentElement);
            toggleCard(card);
        } else {
            console.warn('‚ö†Ô∏è Aucune carte parente trouv√©e pour cet √©l√©ment');
            console.log('üîç √âl√©ment cliqu√©:', clickable);
            console.log('üîç Chemin DOM:', clickable.parentElement);
            console.log('üîç Recherche de la carte avec:', SELECTORS.CARD);
        }
    });

    console.log('‚úÖ √âcouteur d\'√©v√©nements configur√© sur le conteneur');
}

// Fonction d'initialisation principale
export function initCentreCards() {
    console.log('üöÄ D√©marrage de l\'initialisation des cartes...');
    
    // Attendre que le DOM soit charg√©
    if (document.readyState === 'loading') {
        console.log('‚è≥ DOM en cours de chargement, attente de DOMContentLoaded...');
        document.addEventListener('DOMContentLoaded', () => {
            console.log('üìÑ DOM charg√©, initialisation des cartes...');
            initializeCardElements();
            setupCardListeners();
        });
    } else {
        console.log('üìÑ DOM d√©j√† charg√©, initialisation imm√©diate...');
        initializeCardElements();
        setupCardListeners();
    }

    // Observer les changements dans le DOM pour g√©rer le contenu dynamique
    console.log('üëÄ Configuration de l\'observateur de mutations...');
    const observer = new MutationObserver((mutations) => {
        console.log(`üîÑ ${mutations.length} mutation(s) d√©tect√©e(s)`);
        mutations.forEach((mutation) => {
            if (mutation.addedNodes.length) {
                console.log(`‚ûï ${mutation.addedNodes.length} nouveau(x) n≈ìud(s) d√©tect√©(s)`);
                initializeCardElements();
                // Pas besoin de r√©initialiser les √©couteurs car on utilise la d√©l√©gation d'√©v√©nements
            }
        });
    });

    // Observer le conteneur principal des cartes
    const cardsContainer = document.querySelector('.collection-list-centre-wrapper');
    if (cardsContainer) {
        console.log('üéØ Conteneur de cartes trouv√©, d√©marrage de l\'observation');
        observer.observe(cardsContainer, {
            childList: true,
            subtree: true
        });
    } else {
        console.warn('‚ö†Ô∏è Conteneur de cartes non trouv√©, observation impossible');
    }

    console.log('‚úÖ Initialisation des cartes termin√©e');
    return Promise.resolve();
}
