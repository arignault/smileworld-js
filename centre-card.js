// Version: 2.0.0 - Version minimaliste pour reconstruction
console.log('üöÄ centre-card.js v2.0.0 charg√© - Pr√™t pour reconstruction');

// Configuration des s√©lecteurs
const SELECTORS = {
    CARD: '.centre-card._wrapper',
    CLICKABLE: '.clickable_wrap, .clickable_button',
    TOGGLE_ELEMENTS: [
        '.centre-card_scroll_wrapper',
        '.tag-holder-wrapper',
        '.centre-card_button-holder'
    ]
};

// √âtat initial des √©l√©ments √† cacher
function initializeCardElements() {
    console.log('üìù Initialisation des √©l√©ments des cartes...');
    let elementsInitialized = 0;
    
    SELECTORS.TOGGLE_ELEMENTS.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        console.log(`üîç Recherche des √©l√©ments "${selector}": ${elements.length} trouv√©s`);
        
        elements.forEach(element => {
            gsap.set(element, { display: 'none' });
            elementsInitialized++;
        });
    });
    
    console.log(`‚úÖ Initialisation termin√©e: ${elementsInitialized} √©l√©ments configur√©s`);
}

// Gestion du toggle d'une carte
function toggleCard(cardElement) {
    const isOpen = cardElement.classList.contains('is-open');
    console.log(`üîÑ Toggle de la carte: ${isOpen ? 'fermeture' : 'ouverture'}`);
    
    // Animation des √©l√©ments
    SELECTORS.TOGGLE_ELEMENTS.forEach(selector => {
        const element = cardElement.querySelector(selector);
        if (element) {
            console.log(`üé≠ Animation de "${selector}" vers ${isOpen ? 'none' : 'flex'}`);
            gsap.to(element, {
                display: isOpen ? 'none' : 'flex',
                duration: 0.3,
                ease: 'power2.inOut',
                onStart: () => console.log(`‚ñ∂Ô∏è D√©but animation pour ${selector}`),
                onComplete: () => console.log(`‚úÖ Animation termin√©e pour ${selector}`)
            });
        } else {
            console.warn(`‚ö†Ô∏è √âl√©ment "${selector}" non trouv√© dans la carte`);
        }
    });

    // Mise √† jour de l'√©tat
    cardElement.classList.toggle('is-open');
    console.log(`üìå √âtat de la carte mis √† jour: ${!isOpen ? 'ouverte' : 'ferm√©e'}`);
}

// Gestionnaire d'√©v√©nements pour les cartes
function setupCardListeners() {
    console.log('üéØ Configuration des √©couteurs d\'√©v√©nements...');
    const clickables = document.querySelectorAll(SELECTORS.CLICKABLE);
    console.log(`üîç ${clickables.length} √©l√©ments cliquables trouv√©s`);

    clickables.forEach((clickable, index) => {
        clickable.addEventListener('click', (event) => {
            event.preventDefault();
            console.log(`üëÜ Clic d√©tect√© sur l'√©l√©ment ${index + 1}`);
            
            const card = clickable.closest(SELECTORS.CARD);
            if (card) {
                console.log('üé¥ Carte parente trouv√©e, d√©clenchement du toggle');
                toggleCard(card);
            } else {
                console.warn('‚ö†Ô∏è Aucune carte parente trouv√©e pour cet √©l√©ment');
            }
        });
        console.log(`‚úÖ √âcouteur ajout√© √† l'√©l√©ment ${index + 1}`);
    });
}

// Fonction d'initialisation principale
export function initCentreCards() {
    console.log('üöÄ D√©marrage de l\'initialisation des cartes...');
    
    // Attendre que le DOM soit charg√©
    if (document.readyState === 'loading') {
        console.log('‚è≥ DOM en cours de chargement, attente de DOMContentLoaded...');
        document.addEventListener('DOMContentLoaded', () => {
            console.log('üìÑ DOM charg√©, initialisation des cartes...');
            initializeCardElements();
            setupCardListeners();
        });
    } else {
        console.log('üìÑ DOM d√©j√† charg√©, initialisation imm√©diate...');
        initializeCardElements();
        setupCardListeners();
    }

    // Observer les changements dans le DOM pour g√©rer le contenu dynamique
    console.log('üëÄ Configuration de l\'observateur de mutations...');
    const observer = new MutationObserver((mutations) => {
        console.log(`üîÑ ${mutations.length} mutation(s) d√©tect√©e(s)`);
        mutations.forEach((mutation) => {
            if (mutation.addedNodes.length) {
                console.log(`‚ûï ${mutation.addedNodes.length} nouveau(x) n≈ìud(s) d√©tect√©(s)`);
                initializeCardElements();
                setupCardListeners();
            }
        });
    });

    // Observer le conteneur principal des cartes
    const cardsContainer = document.querySelector('.collection-list-centre-wrapper');
    if (cardsContainer) {
        console.log('üéØ Conteneur de cartes trouv√©, d√©marrage de l\'observation');
        observer.observe(cardsContainer, {
            childList: true,
            subtree: true
        });
    } else {
        console.warn('‚ö†Ô∏è Conteneur de cartes non trouv√©, observation impossible');
    }

    console.log('‚úÖ Initialisation des cartes termin√©e');
    return Promise.resolve();
}
